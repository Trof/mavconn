/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <stdint.h>
#include <stdlib.h>
#include <lcm/lcm_coretypes.h>
#include <lcm/lcm.h>

#ifndef _mavconn_mavlink_msg_container_t_h
#define _mavconn_mavlink_msg_container_t_h

#ifdef __cplusplus
extern "C" {
#endif

#include "mavconn_mavlink_message_t.h"
typedef struct _mavconn_mavlink_msg_container_t mavconn_mavlink_msg_container_t;
struct _mavconn_mavlink_msg_container_t
{
    int8_t     link_network_source;
    int8_t     link_component_id;
    mavconn_mavlink_message_t msg;
    int32_t    extended_payload_len;
    int8_t     *extended_payload;
};
 
mavconn_mavlink_msg_container_t   *mavconn_mavlink_msg_container_t_copy(const mavconn_mavlink_msg_container_t *p);
void mavconn_mavlink_msg_container_t_destroy(mavconn_mavlink_msg_container_t *p);

typedef struct _mavconn_mavlink_msg_container_t_subscription_t mavconn_mavlink_msg_container_t_subscription_t;
typedef void(*mavconn_mavlink_msg_container_t_handler_t)(const lcm_recv_buf_t *rbuf, 
             const char *channel, const mavconn_mavlink_msg_container_t *msg, void *user);

int mavconn_mavlink_msg_container_t_publish(lcm_t *lcm, const char *channel, const mavconn_mavlink_msg_container_t *p);
mavconn_mavlink_msg_container_t_subscription_t* mavconn_mavlink_msg_container_t_subscribe(lcm_t *lcm, const char *channel, mavconn_mavlink_msg_container_t_handler_t f, void *userdata);
int mavconn_mavlink_msg_container_t_unsubscribe(lcm_t *lcm, mavconn_mavlink_msg_container_t_subscription_t* hid);
int mavconn_mavlink_msg_container_t_subscription_set_queue_capacity(mavconn_mavlink_msg_container_t_subscription_t* subs, 
                              int num_messages);


int  mavconn_mavlink_msg_container_t_encode(void *buf, int offset, int maxlen, const mavconn_mavlink_msg_container_t *p);
int  mavconn_mavlink_msg_container_t_decode(const void *buf, int offset, int maxlen, mavconn_mavlink_msg_container_t *p);
int  mavconn_mavlink_msg_container_t_decode_cleanup(mavconn_mavlink_msg_container_t *p);
int  mavconn_mavlink_msg_container_t_encoded_size(const mavconn_mavlink_msg_container_t *p);

// LCM support functions. Users should not call these
int64_t __mavconn_mavlink_msg_container_t_get_hash(void);
int64_t __mavconn_mavlink_msg_container_t_hash_recursive(const __lcm_hash_ptr *p);
int     __mavconn_mavlink_msg_container_t_encode_array(void *buf, int offset, int maxlen, const mavconn_mavlink_msg_container_t *p, int elements);
int     __mavconn_mavlink_msg_container_t_decode_array(const void *buf, int offset, int maxlen, mavconn_mavlink_msg_container_t *p, int elements);
int     __mavconn_mavlink_msg_container_t_decode_array_cleanup(mavconn_mavlink_msg_container_t *p, int elements);
int     __mavconn_mavlink_msg_container_t_encoded_array_size(const mavconn_mavlink_msg_container_t *p, int elements);
int     __mavconn_mavlink_msg_container_t_clone_array(const mavconn_mavlink_msg_container_t *p, mavconn_mavlink_msg_container_t *q, int elements);

#ifdef __cplusplus
}
#endif

#endif
